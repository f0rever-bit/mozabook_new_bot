# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É: –≤–∏–±—ñ—Ä –∫—É—Ä—Å—É, –º–æ–¥—É–ª—ñ–≤, –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from data.shared import main_menu_keyboard, course_titles, courses  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–∑ shared.py
from data.progress import update_module_progress

router = Router()

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è: –≤–∏–±—ñ—Ä –∫—É—Ä—Å—É, –≤–∏–±—ñ—Ä –º–æ–¥—É–ª—è
class TrainingState(StatesGroup):
    choosing_course = State()
    choosing_module = State()

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ –∑ —É—Å—ñ—Ö –∫—É—Ä—Å—ñ–≤
def get_all_modules():
    modules = []
    for course in courses.values():
        modules.extend(course["modules"].keys())
    return modules

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É (inline)
def course_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"course:{key}")]
        for key, name in course_titles.items()
    ] + [[InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="to_menu")]])

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–æ–¥—É–ª—è—Ö (–Ω–∞—Å—Ç—É–ø–Ω–∏–π, —Ç–µ—Å—Ç, –º–µ–Ω—é)
def module_navigation_keyboard(course_key: str, module_index: int, is_last: bool = False):
    buttons = []

    if not is_last:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å", callback_data=f"module:{course_key}:{module_index + 1}"))
    else:
        buttons.append(InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—É—Ä—Å", callback_data="finish_course"))

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    buttons.append(InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", callback_data=f"start_quiz:{course_key}:{module_index}"))

    buttons.append(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="to_menu"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

# –°—Ç–∞—Ä—Ç –Ω–∞–≤—á–∞–Ω–Ω—è: –≤–∏–±—ñ—Ä –∫—É—Ä—Å—É
@router.message(F.text == "üìò –ü–æ—á–∞—Ç–∏/–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")
async def start_training(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üìö –û–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∫—É—Ä—Å:", reply_markup=course_inline_keyboard())
    await state.set_state(TrainingState.choosing_course)

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫—É—Ä—Å—É, –ø–æ–∫–∞–∑ –ø–µ—Ä—à–æ–≥–æ –º–æ–¥—É–ª—è
@router.callback_query(F.data.startswith("course:"))
async def open_course(callback: CallbackQuery, state: FSMContext):
    # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—É—Ä—Å—É
    course_key = callback.data.split(":", 1)[1]
    course_name = course_titles.get(course_key)
    if not course_name:
        await callback.message.answer("‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞: –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    await state.update_data(course=course_key)
    await callback.message.edit_text(f"üìñ –û–±—Ä–∞–Ω–æ –∫—É—Ä—Å: <b>{course_name}</b>\n\nüìò –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –º–æ–¥—É–ª—è ‚¨áÔ∏è", parse_mode="HTML")
    await send_module(callback.message, course_key, 0)

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–æ–¥—É–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def send_module(message: Message, course_key: str, module_index: int):
    course = courses[course_key]
    modules = list(course["modules"].values())  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª—ñ–≤
    module_titles = list(course["modules"].keys())  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –º–æ–¥—É–ª—ñ–≤

    if module_index >= len(modules):
        # –Ø–∫—â–æ –≤—Å—ñ –º–æ–¥—É–ª—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ
        await message.answer("‚úÖ –í—Å—ñ –º–æ–¥—É–ª—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return

    module = modules[module_index]
    module_id = module_titles[module_index]  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –º–æ–¥—É–ª—è

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
    update_module_progress(message.from_user.id, course_key, module_id)

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è
    header = f"<b>üìò {module['title']}</b>\n\n"
    summary = "\n".join(f"‚Ä¢ {line}" for line in module["summary"])
    summary_text = f"<b>–ö–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç:</b>\n{summary}\n\n"
    description = f"<b>–û–ø–∏—Å:</b>\n{module['description']}"

    full_text = header + summary_text + description

    # Telegram –æ–±–º–µ–∂—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ 4096 —Å–∏–º–≤–æ–ª—ñ–≤
    chunks = [full_text[i:i+4000] for i in range(0, len(full_text), 4000)]

    for i, chunk in enumerate(chunks):
        if i == len(chunks) - 1:
            # –û—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                chunk,
                parse_mode="HTML",
                reply_markup=module_navigation_keyboard(course_key, module_index, is_last=(module_index == len(modules) - 1))
            )
        else:
            await message.answer(chunk, parse_mode="HTML")

# –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º–æ–¥—É–ª—è
@router.callback_query(F.data.startswith("module:"))
async def next_module(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception:
        pass
    _, course_name, module_index = callback.data.split(":", 2)
    await send_module(callback.message, course_name, int(module_index))

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫—É—Ä—Å—É
@router.callback_query(F.data == "finish_course")
async def finish_course(callback: CallbackQuery, state: FSMContext):
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer(
        "üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å! –í—ñ—Ç–∞—î–º–æ!\n\nüß™ –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üß™ –î–æ —Ç–µ—Å—Ç—É", callback_data="to_test"),
                InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="to_menu")
            ]
        ])
    )

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@router.callback_query(F.data == "to_menu")
async def return_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)